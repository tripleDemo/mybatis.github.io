<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="code.mybatis.hello.mapper.EmployeeMapper">
	<!-- where元素：判断查询条件是否有where关键字,如果没有，则在第一个查询条件之前插入一个where。
					如果发现查询条件以and或者or开头，也会把第一个查询条件钱的and/or替换成where。 -->
	<select id="query" resultType="Employee">
		select id,name,sn,salary,deptId from employee
		<where>
			<if test="minSalary !=null">
				and salary >= #{minSalary}
			</if>
			<if test="maxSalary !=null">
				and salary &lt;= #{maxSalary}
			</if>
			
			<choose>
				<when test="deptId > 0">and deptId = #{deptId}</when>
				<otherwise>and deptId is not null</otherwise>
			</choose>
		</where>
	</select>
	
	<delete id="batchDelete">
		delete from employee where id in
		<!--foreach元素：
				collection属性：表示对哪一个集合或数组做迭代
						如果参数是数组类型，此时Map的key为array，
						如果参数是List类型，此时Map的key为list,
						可以在参数上使用Param注解，规定死Map中key是什么。
				open属性：在迭代集合之前，拼接什么符号。
				close属性：在迭代集合之后，拼接什么符号。
				separator属性：在迭代元素时，每一个元素之间使用什么符号分割开来。
				item属性：被迭代的每一个元素的变量
				index属性：迭代的索引
		 -->
		<foreach collection="ids" open="(" close=")" separator="," item="id">
			#{id}
		</foreach>
	</delete>
	
	<insert id="batchSave">
		insert into employee (name,sn,salary) values
		<foreach collection="emps" separator="," item="e">
			(#{e.name},#{e.sn},#{e.salary})
		</foreach>
	</insert>
	
	<select id="batchSelectForId" resultType="Employee">
		select id,name,sn,salary,deptId from employee where id in
		<foreach collection="ids" open="(" close=")" separator="," item="id">
			#{id}
		</foreach>
	</select>
</mapper>
    