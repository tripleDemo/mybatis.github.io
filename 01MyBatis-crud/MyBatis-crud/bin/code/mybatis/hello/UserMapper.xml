<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 不同的mapper文件的namespace是不一样的 -->
<mapper namespace="code.mybatis.hello.UserMapper">
	<!-- 
		select元素：专门用来做些检查的SQL
			-id属性：唯一标识，用来标识某一条SQL语句
				id属性和mapper的namespace唯一的标识了应用中的某一条SQL语句
			-parameterType属性：表示执行该SQL语句需要的参数的类型，建议不写，Mybatis可以自行推断出来
			-resultType属性：把结果集中的每一行数据封装成什么类型的对象
	 -->
	<select id="get" parameterType="java.lang.Long" resultType="code.mybatis.hello.User">
		select * from t_user where id = #{id}
	</select>
	
	<select id="listAll" resultType="code.mybatis.hello.User">
		select * from t_user
	</select>
	
	<!-- 更改操作 -->
	<update id="update" parameterType="code.mybatis.hello.User">
		update t_user set name=#{name},salary=#{salary} where id=#{id}
	</update>
	
	<!-- 删除操作 -->
	<delete id="delete" parameterType="java.lang.Long">
		delete from t_user where id=#{id}
	</delete>
	
	<!-- 保存操作 
		保存一条数据后，需要得到刚刚保存数据生成的主键的值
		insert元素：
			useGeneratedKeys属性：是否需要返回自动生成的主键
			keyProperty：把自动生成的主键值设置到对象的哪一个属性上(OID)
	-->
	<insert id="save" useGeneratedKeys="true" keyProperty="id" 
		parameterType="code.mybatis.hello.User">
		insert into t_user (name,salary) values(#{name},#{salary})
	</insert>
</mapper>
    